/* tslint:disable */
/* eslint-disable */
/**
 * planner
 * planner
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface IEntry
 */
export interface IEntry {
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof IEntry
     */
    outflow: string;
}
/**
 * 
 * @export
 * @interface IEntryFilter
 */
export interface IEntryFilter {
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter
     */
    skip?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IEntryFilter
     */
    order?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IEntryFilter
     */
    fields?: object | Set<string>;
}
/**
 * 
 * @export
 * @interface IEntryFilter1
 */
export interface IEntryFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof IEntryFilter1
     */
    skip?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IEntryFilter1
     */
    order?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IEntryFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IEntryFilter1
     */
    fields?: object | Set<string>;
}
/**
 * (tsType: Partial<Entry>, schemaOptions: { partial: true })
 * @export
 * @interface IEntryPartial
 */
export interface IEntryPartial {
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    ymd?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    tags?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    method?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    inflow?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryPartial
     */
    outflow?: string;
}
/**
 * (tsType: EntryWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IEntryWithRelations
 */
export interface IEntryWithRelations {
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof IEntryWithRelations
     */
    outflow: string;
}
/**
 * 
 * @export
 * @interface IExpense
 */
export interface IExpense {
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof IExpense
     */
    outflow: string;
}
/**
 * 
 * @export
 * @interface IExpenseFilter
 */
export interface IExpenseFilter {
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter
     */
    skip?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IExpenseFilter
     */
    order?: string | Array<string>;
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IExpenseFilter
     */
    fields?: object | Set<string>;
    /**
     * 
     * @type {Array<IExpenseIncludeFilterItems | string>}
     * @memberof IExpenseFilter
     */
    include?: Array<IExpenseIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface IExpenseFilter1
 */
export interface IExpenseFilter1 {
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter1
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter1
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseFilter1
     */
    skip?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IExpenseFilter1
     */
    order?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IExpenseFilter1
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {object | Set<string>}
     * @memberof IExpenseFilter1
     */
    fields?: object | Set<string>;
    /**
     * 
     * @type {Array<IExpenseIncludeFilterItems | string>}
     * @memberof IExpenseFilter1
     */
    include?: Array<IExpenseIncludeFilterItems | string>;
}
/**
 * 
 * @export
 * @interface IExpenseIncludeFilterItems
 */
export interface IExpenseIncludeFilterItems {
    /**
     * 
     * @type {string}
     * @memberof IExpenseIncludeFilterItems
     */
    relation?: string;
    /**
     * 
     * @type {IExpenseScopeFilter}
     * @memberof IExpenseIncludeFilterItems
     */
    scope?: IExpenseScopeFilter;
}
/**
 * (tsType: Partial<Expense>, schemaOptions: { partial: true })
 * @export
 * @interface IExpensePartial
 */
export interface IExpensePartial {
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    ymd?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    description?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    tags?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    method?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    inflow?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpensePartial
     */
    outflow?: string;
}
/**
 * 
 * @export
 * @interface IExpenseScopeFilter
 */
export interface IExpenseScopeFilter {
    /**
     * 
     * @type {number}
     * @memberof IExpenseScopeFilter
     */
    offset?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseScopeFilter
     */
    limit?: number;
    /**
     * 
     * @type {number}
     * @memberof IExpenseScopeFilter
     */
    skip?: number;
    /**
     * 
     * @type {string | Array<string>}
     * @memberof IExpenseScopeFilter
     */
    order?: string | Array<string>;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IExpenseScopeFilter
     */
    where?: { [key: string]: object; };
    /**
     * 
     * @type {any | Set<string>}
     * @memberof IExpenseScopeFilter
     */
    fields?: any | Set<string>;
    /**
     * 
     * @type {Array<{ [key: string]: object; }>}
     * @memberof IExpenseScopeFilter
     */
    include?: Array<{ [key: string]: object; }>;
}
/**
 * (tsType: ExpenseWithRelations, schemaOptions: { includeRelations: true })
 * @export
 * @interface IExpenseWithRelations
 */
export interface IExpenseWithRelations {
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof IExpenseWithRelations
     */
    outflow: string;
    /**
     * 
     * @type {IEntryWithRelations}
     * @memberof IExpenseWithRelations
     */
    entry?: IEntryWithRelations;
}
/**
 * 
 * @export
 * @interface ILoopbackCount
 */
export interface ILoopbackCount {
    /**
     * 
     * @type {number}
     * @memberof ILoopbackCount
     */
    count?: number;
}
/**
 * (tsType: Omit<Entry, \'id\'>, schemaOptions: { title: \'NewEntry\', exclude: [ \'id\' ] })
 * @export
 * @interface INewEntry
 */
export interface INewEntry {
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof INewEntry
     */
    outflow: string;
}
/**
 * (tsType: Omit<Expense, \'id\'>, schemaOptions: { title: \'NewExpense\', exclude: [ \'id\' ] })
 * @export
 * @interface INewExpense
 */
export interface INewExpense {
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    ymd: string;
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    description: string;
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    tags: string;
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    method: string;
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    inflow: string;
    /**
     * 
     * @type {string}
     * @memberof INewExpense
     */
    outflow: string;
}
/**
 * 
 * @export
 * @interface IPingResponse
 */
export interface IPingResponse {
    /**
     * 
     * @type {string}
     * @memberof IPingResponse
     */
    greeting?: string;
    /**
     * 
     * @type {string}
     * @memberof IPingResponse
     */
    date?: string;
    /**
     * 
     * @type {string}
     * @memberof IPingResponse
     */
    url?: string;
    /**
     * 
     * @type {{ [key: string]: object; }}
     * @memberof IPingResponse
     */
    headers?: { [key: string]: object; };
}

/**
 * EntryControllerApi - axios parameter creator
 * @export
 */
export const EntryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerCount: async (where?: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entries/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {INewEntry} [iNewEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerCreate: async (iNewEntry?: INewEntry, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iNewEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerDeleteById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('entryControllerDeleteById', 'id', id)
            const localVarPath = `/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IEntryFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerFind: async (filter?: IEntryFilter1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerFindById: async (id: string, filter?: IEntryFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('entryControllerFindById', 'id', id)
            const localVarPath = `/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntry} [iEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerReplaceById: async (id: string, iEntry?: IEntry, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('entryControllerReplaceById', 'id', id)
            const localVarPath = `/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iEntry, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerUpdateAll: async (where?: { [key: string]: object; }, iEntryPartial?: IEntryPartial, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/entries`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iEntryPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerUpdateById: async (id: string, iEntryPartial?: IEntryPartial, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('entryControllerUpdateById', 'id', id)
            const localVarPath = `/entries/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iEntryPartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EntryControllerApi - functional programming interface
 * @export
 */
export const EntryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EntryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerCount(where?: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ILoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {INewEntry} [iNewEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerCreate(iNewEntry?: INewEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IEntry>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerCreate(iNewEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerDeleteById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IEntryFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerFind(filter?: IEntryFilter1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IEntryWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerFindById(id: string, filter?: IEntryFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IEntryWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntry} [iEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerReplaceById(id: string, iEntry?: IEntry, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerReplaceById(id, iEntry, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerUpdateAll(where?: { [key: string]: object; }, iEntryPartial?: IEntryPartial, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ILoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerUpdateAll(where, iEntryPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async entryControllerUpdateById(id: string, iEntryPartial?: IEntryPartial, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.entryControllerUpdateById(id, iEntryPartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * EntryControllerApi - factory interface
 * @export
 */
export const EntryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EntryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<ILoopbackCount> {
            return localVarFp.entryControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {INewEntry} [iNewEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerCreate(iNewEntry?: INewEntry, options?: any): AxiosPromise<IEntry> {
            return localVarFp.entryControllerCreate(iNewEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.entryControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IEntryFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerFind(filter?: IEntryFilter1, options?: any): AxiosPromise<Array<IEntryWithRelations>> {
            return localVarFp.entryControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerFindById(id: string, filter?: IEntryFilter, options?: any): AxiosPromise<IEntryWithRelations> {
            return localVarFp.entryControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntry} [iEntry] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerReplaceById(id: string, iEntry?: IEntry, options?: any): AxiosPromise<void> {
            return localVarFp.entryControllerReplaceById(id, iEntry, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerUpdateAll(where?: { [key: string]: object; }, iEntryPartial?: IEntryPartial, options?: any): AxiosPromise<ILoopbackCount> {
            return localVarFp.entryControllerUpdateAll(where, iEntryPartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IEntryPartial} [iEntryPartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        entryControllerUpdateById(id: string, iEntryPartial?: IEntryPartial, options?: any): AxiosPromise<void> {
            return localVarFp.entryControllerUpdateById(id, iEntryPartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * EntryControllerApi - object-oriented interface
 * @export
 * @class EntryControllerApi
 * @extends {BaseAPI}
 */
export class EntryControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerCount(where?: { [key: string]: object; }, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {INewEntry} [iNewEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerCreate(iNewEntry?: INewEntry, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerCreate(iNewEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerDeleteById(id: string, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IEntryFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerFind(filter?: IEntryFilter1, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IEntryFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerFindById(id: string, filter?: IEntryFilter, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IEntry} [iEntry] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerReplaceById(id: string, iEntry?: IEntry, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerReplaceById(id, iEntry, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IEntryPartial} [iEntryPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerUpdateAll(where?: { [key: string]: object; }, iEntryPartial?: IEntryPartial, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerUpdateAll(where, iEntryPartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IEntryPartial} [iEntryPartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EntryControllerApi
     */
    public entryControllerUpdateById(id: string, iEntryPartial?: IEntryPartial, options?: any) {
        return EntryControllerApiFp(this.configuration).entryControllerUpdateById(id, iEntryPartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ExpenseControllerApi - axios parameter creator
 * @export
 */
export const ExpenseControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerCount: async (where?: { [key: string]: object; }, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses/count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {INewExpense} [iNewExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerCreate: async (iNewExpense?: INewExpense, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iNewExpense, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerDeleteById: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseControllerDeleteById', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {IExpenseFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerFind: async (filter?: IExpenseFilter1, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpenseFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerFindById: async (id: string, filter?: IExpenseFilter, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseControllerFindById', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (filter !== undefined) {
                localVarQueryParameter['filter'] = filter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpense} [iExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerReplaceById: async (id: string, iExpense?: IExpense, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseControllerReplaceById', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iExpense, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerUpdateAll: async (where?: { [key: string]: object; }, iExpensePartial?: IExpensePartial, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/expenses`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (where !== undefined) {
                localVarQueryParameter['where'] = where;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iExpensePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerUpdateById: async (id: string, iExpensePartial?: IExpensePartial, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('expenseControllerUpdateById', 'id', id)
            const localVarPath = `/expenses/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(iExpensePartial, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExpenseControllerApi - functional programming interface
 * @export
 */
export const ExpenseControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExpenseControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerCount(where?: { [key: string]: object; }, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ILoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerCount(where, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {INewExpense} [iNewExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerCreate(iNewExpense?: INewExpense, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IExpense>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerCreate(iNewExpense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerDeleteById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerDeleteById(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {IExpenseFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerFind(filter?: IExpenseFilter1, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<IExpenseWithRelations>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerFind(filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpenseFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerFindById(id: string, filter?: IExpenseFilter, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IExpenseWithRelations>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerFindById(id, filter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpense} [iExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerReplaceById(id: string, iExpense?: IExpense, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerReplaceById(id, iExpense, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerUpdateAll(where?: { [key: string]: object; }, iExpensePartial?: IExpensePartial, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ILoopbackCount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerUpdateAll(where, iExpensePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async expenseControllerUpdateById(id: string, iExpensePartial?: IExpensePartial, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.expenseControllerUpdateById(id, iExpensePartial, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ExpenseControllerApi - factory interface
 * @export
 */
export const ExpenseControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExpenseControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerCount(where?: { [key: string]: object; }, options?: any): AxiosPromise<ILoopbackCount> {
            return localVarFp.expenseControllerCount(where, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {INewExpense} [iNewExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerCreate(iNewExpense?: INewExpense, options?: any): AxiosPromise<IExpense> {
            return localVarFp.expenseControllerCreate(iNewExpense, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerDeleteById(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.expenseControllerDeleteById(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {IExpenseFilter1} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerFind(filter?: IExpenseFilter1, options?: any): AxiosPromise<Array<IExpenseWithRelations>> {
            return localVarFp.expenseControllerFind(filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpenseFilter} [filter] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerFindById(id: string, filter?: IExpenseFilter, options?: any): AxiosPromise<IExpenseWithRelations> {
            return localVarFp.expenseControllerFindById(id, filter, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpense} [iExpense] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerReplaceById(id: string, iExpense?: IExpense, options?: any): AxiosPromise<void> {
            return localVarFp.expenseControllerReplaceById(id, iExpense, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {{ [key: string]: object; }} [where] 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerUpdateAll(where?: { [key: string]: object; }, iExpensePartial?: IExpensePartial, options?: any): AxiosPromise<ILoopbackCount> {
            return localVarFp.expenseControllerUpdateAll(where, iExpensePartial, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {IExpensePartial} [iExpensePartial] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        expenseControllerUpdateById(id: string, iExpensePartial?: IExpensePartial, options?: any): AxiosPromise<void> {
            return localVarFp.expenseControllerUpdateById(id, iExpensePartial, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExpenseControllerApi - object-oriented interface
 * @export
 * @class ExpenseControllerApi
 * @extends {BaseAPI}
 */
export class ExpenseControllerApi extends BaseAPI {
    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerCount(where?: { [key: string]: object; }, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerCount(where, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {INewExpense} [iNewExpense] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerCreate(iNewExpense?: INewExpense, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerCreate(iNewExpense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerDeleteById(id: string, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerDeleteById(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {IExpenseFilter1} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerFind(filter?: IExpenseFilter1, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerFind(filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IExpenseFilter} [filter] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerFindById(id: string, filter?: IExpenseFilter, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerFindById(id, filter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IExpense} [iExpense] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerReplaceById(id: string, iExpense?: IExpense, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerReplaceById(id, iExpense, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {{ [key: string]: object; }} [where] 
     * @param {IExpensePartial} [iExpensePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerUpdateAll(where?: { [key: string]: object; }, iExpensePartial?: IExpensePartial, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerUpdateAll(where, iExpensePartial, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {IExpensePartial} [iExpensePartial] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExpenseControllerApi
     */
    public expenseControllerUpdateById(id: string, iExpensePartial?: IExpensePartial, options?: any) {
        return ExpenseControllerApiFp(this.configuration).expenseControllerUpdateById(id, iExpensePartial, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PingControllerApi - axios parameter creator
 * @export
 */
export const PingControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/ping`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PingControllerApi - functional programming interface
 * @export
 */
export const PingControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PingControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pingControllerPing(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<IPingResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pingControllerPing(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PingControllerApi - factory interface
 * @export
 */
export const PingControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PingControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pingControllerPing(options?: any): AxiosPromise<IPingResponse> {
            return localVarFp.pingControllerPing(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PingControllerApi - object-oriented interface
 * @export
 * @class PingControllerApi
 * @extends {BaseAPI}
 */
export class PingControllerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PingControllerApi
     */
    public pingControllerPing(options?: any) {
        return PingControllerApiFp(this.configuration).pingControllerPing(options).then((request) => request(this.axios, this.basePath));
    }
}


